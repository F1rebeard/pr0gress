from aiogram.types import InlineKeyboardMarkup
from loguru import logger

from src.bot.keyboards.subscription import (
    renew_or_change_subscription_kb,
    subs_kb,
    subs_or_trial_kb,
    to_registration_btn,
    unfreeze_subscription_kb,
)
from src.bot.keyboards.utils import create_inline_keyboard
from src.domain.user.context import UserContext
from src.services.free_trial import FreeTrialService
from src.services.main_menu import MainMenuService


class StartCommandService:
    def __init__(self, session):
        self.session = session

    async def get_start_message(self, ctx: UserContext) -> tuple[str, InlineKeyboardMarkup | None]:
        if ctx.is_new_user:
            return (
                'üî• –ü—Ä–∏–≤–µ—Ç!\n–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ <b>–ü—Ä–æ–≥—Ä–µ—Å—Å</b>!\n\n'
                '–ú–æ–∂–µ—à—å –≤–∑—è—Ç—å –ø—Ä–æ–±–Ω—É—é –Ω–µ–¥–µ–ª—é –∏ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –Ω–∞—à–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏, '
                '–∞ –º–æ–∂–µ—à—å —Å—Ä–∞–∑—É –≤—ã–±—Ä–∞—Ç—å –ø–æ–¥—Ö–æ–¥—è—â—É—é –ø–æ–¥–ø–∏—Å–∫—É‚Äç.',
                subs_or_trial_kb
            )
        if ctx.needs_registration:
            return (
                'üèãÔ∏è‚Äç‚ôÇÔ∏è –ü–æ—á—Ç–∏ –≥–æ—Ç–æ–≤–æ!\n–ü–æ–¥–ø–∏—Å–∫–∞ <b>–æ–ø–ª–∞—á–µ–Ω–∞</b>.\n'
                'üìù –û—Å—Ç–∞–ª—Å—è –ø–æ—Å–ª–µ–¥–Ω–∏–π —à–∞–≥ ‚Äì –∑–∞–ø–æ–ª–Ω–∏ –¥–∞–Ω–Ω—ã–µ, –∏ –Ω–∞—á–Ω–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏!',
                to_registration_btn
            )
        if ctx.is_frozen:
            return (
                '‚ùÑÔ∏è <b>–ü–æ–¥–ø–∏—Å–∫–∞ –∑–∞–º–æ—Ä–æ–∂–µ–Ω–∞</b>\n\n'
                '–ú—ã —Å–∫—É—á–∞–µ–º –ø–æ —Ç–≤–æ–∏–º —Ä–µ–∫–æ—Ä–¥–∞–º, –∞ —à—Ç–∞–Ω–≥–∞ –∑–∞—Å—Ç–æ—è–ª–∞—Å—å‚Ä¶\n'
                'üëâ <b>–†–∞–∑–º–æ—Ä–æ–∑—å –ø–æ–¥–ø–∏—Å–∫—É</b> –∏ –≤–æ–∑–≤—Ä–∞—â–∞–π—Å—è –≤ –∏–≥—Ä—É! üèãÔ∏è‚Äç‚ôÄÔ∏è',
                unfreeze_subscription_kb
            )
        if ctx.is_expired:
            return (
                '–¢–≤–æ—è –ø–æ–¥–ø–∏—Å–∫–∞ <b>–∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å üò¢</b>.\n'
                'üî• –ù–æ —Ç—ã –º–æ–∂–µ—à—å –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ü—Ä–æ–≥—Ä–µ—Å—Å –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å!\n'
                'üìå –û–±–Ω–æ–≤–∏ –ø–æ–¥–ø–∏—Å–∫—É –∏ –ø—Ä–æ–¥–æ–ª–∂–∞–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∞—Ç—å—Å—è —Å –Ω–∞–º–∏!\n',
                renew_or_change_subscription_kb
            )
        if ctx.is_active:
            return await MainMenuService(self.session).get_main_menu_text_and_markup(ctx.telegram_id)

        logger.error("‚ùó Unknown user state encountered")
        return "‚ùó–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", None

    async def try_free_trial(self, telegram_id: int) -> tuple[str, InlineKeyboardMarkup]:
        trial_service = FreeTrialService(self.session)
        await trial_service.get_or_create_trial_for_user(telegram_id)
        is_active = await trial_service.is_trial_active(telegram_id)
        if not is_active:
            return (
                "–ü—Ä–æ–±–Ω–∞—è –Ω–µ–¥–µ–ª—è –∏—Å—Ç–µ–∫–ª–∞ üò¢. –û—Ñ–æ—Ä–º–∏ –ø–æ–¥–ø–∏—Å–∫—É, –∏ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Å—è –∫ –Ω–∞–º üèãÔ∏è",
                subs_kb
            )

        trial_workouts = await trial_service.get_trial_workouts()
        markup_kb = create_inline_keyboard(
            [
                (f"–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ ‚Ññ{workout.position}", f"{workout.workout_id}")
                for workout in trial_workouts
            ]
        )
        return (
            "–¢–£–¢ –ë–£–î–ï–¢ –ò–ù–°–¢–†–£–ö–¶–ò–Ø –ö –ü–†–û–ë–ù–´–ú –¢–†–ï–ù–ò–†–û–í–ö–ê–ú –ò –û–ü–ò–°–ê–ù–ò–ï",
            markup_kb
        )
